openapi: "3.0.0"
info:
  version: 1.0.0
  title: eFantasy auth
consumes:
  - application/json
produces:
  - application/json
  - application/problem+json
paths:
  /v1/auth/register:
    post:
      summary: Create a new account
      operationId: createAccount
      tags:
        - auth
      requestBody:
        description: Account details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
            example:
              username: g4m3rG1rl13
              email: email@hostname.com
              password: veryStr0ngP4ssw0rd
      responses:
        "201":
          description: Account successfully created
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/auth/auth:
    post:
      summary: Authenticate a user returning a JWT for future operations and set session token for browsers
      operationId: performAuth
      tags:
        - auth
      requestBody:
        description: Authentication claims and claim data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthClaim"
      responses:
        "200":
          description: JWT authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWT"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/auth/verifyemail:
    post:
      summary: Verify a user's email
      operationId: verify
      tags:
        - auth
      requestBody:
        description: Verification token
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailVerification"
      responses:
        "200":
          description: Returned if verification was successful
        "404":
          description: The provided verfication token or user was not found. Token possibly expired.
        default:
          description: Unexpected error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/auth/passwordreset/verify:
    post:
      summary: Submit a password reset verification
      operationId: passwordresetverify
      tags:
        - auth
      requestBody:
        description: Requires the username and a token
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetVerify"
      responses:
        "200":
          description: Returned if reset was successful
        "400":
          description: New password did not have a valid format
        "404":
          description: User does not exist or token not valid
        default:
          description: Unexpected error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /v1/auth/passwordreset/request:
    post:
      summary: Submit a password reset request
      operationId: passwordresetrequest
      tags:
        - auth
      requestBody:
        description: Asks for email and password of the user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
      responses:
        "200":
          description: This endpoint always returns success, unless request format is invalid
        default:
          description: Unexpected error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/auth/check:
    get:
      summary: Check if parameter is valid/available
      operationId: check
      tags:
        - auth
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: false
          description: Check if username is available
      responses:
        "200":
          description: Returned if reset was successful
        "400":
          description: Not available
        default:
          description: Unexpected error occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Account:
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
    AuthClaim:
      required:
        - claim
      properties:
        claim:
          type: string
          enum: [username+password, mfa, renew]
        token:
          type: string
        username:
          type: string
        password:
          type: string
        mfa_code:
          type: string
    JWT:
      required:
        - access_token
        - expires_in
        - mfa_required
        - mfa_type
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        mfa_required:
          type: boolean
        mfa_type:
          type: string
    EmailVerification:
      required:
        - username
        - token
      properties:
        username:
          type: string
        token:
          type: string
    PasswordResetVerify:
      required:
        - username
        - token
        - password
      properties:
        username:
          type: string
        token:
          type: string
        password:
          type: string
    PasswordResetRequest:
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
