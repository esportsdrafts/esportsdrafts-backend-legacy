// Package auth provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Account defines model for Account.
type Account struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthClaim defines model for AuthClaim.
type AuthClaim struct {
	Claim    string  `json:"claim"`
	MfaCode  *string `json:"mfa_code,omitempty"`
	Password *string `json:"password,omitempty"`
	Token    *string `json:"token,omitempty"`
	Username *string `json:"username,omitempty"`
}

// EmailVerification defines model for EmailVerification.
type EmailVerification struct {
	Token    string `json:"token"`
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// JWT defines model for JWT.
type JWT struct {
	AccessToken string `json:"access_token"`
	ExpiresIn   int    `json:"expires_in"`
	MfaRequired bool   `json:"mfa_required"`
	MfaType     string `json:"mfa_type"`
}

// PasswordResetRequest defines model for PasswordResetRequest.
type PasswordResetRequest struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

// PasswordResetVerify defines model for PasswordResetVerify.
type PasswordResetVerify struct {
	Password string `json:"password"`
	Token    string `json:"token"`
	Username string `json:"username"`
}

// performAuthJSONBody defines parameters for PerformAuth.
type performAuthJSONBody AuthClaim

// CheckParams defines parameters for Check.
type CheckParams struct {
	Username *string `json:"username,omitempty"`
}

// passwordresetrequestJSONBody defines parameters for Passwordresetrequest.
type passwordresetrequestJSONBody PasswordResetRequest

// passwordresetverifyJSONBody defines parameters for Passwordresetverify.
type passwordresetverifyJSONBody PasswordResetVerify

// createAccountJSONBody defines parameters for CreateAccount.
type createAccountJSONBody Account

// verifyJSONBody defines parameters for Verify.
type verifyJSONBody EmailVerification

// PerformAuthRequestBody defines body for PerformAuth for application/json ContentType.
type PerformAuthJSONRequestBody performAuthJSONBody

// PasswordresetrequestRequestBody defines body for Passwordresetrequest for application/json ContentType.
type PasswordresetrequestJSONRequestBody passwordresetrequestJSONBody

// PasswordresetverifyRequestBody defines body for Passwordresetverify for application/json ContentType.
type PasswordresetverifyJSONRequestBody passwordresetverifyJSONBody

// CreateAccountRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody createAccountJSONBody

// VerifyRequestBody defines body for Verify for application/json ContentType.
type VerifyJSONRequestBody verifyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user returning a JWT for future operations and set session token for browsers// (POST /v1/auth/auth)
	PerformAuth(ctx echo.Context) error
	// Check if parameter is valid/available// (GET /v1/auth/check)
	Check(ctx echo.Context, params CheckParams) error
	// Submit a password reset request// (POST /v1/auth/passwordreset/request)
	Passwordresetrequest(ctx echo.Context) error
	// Submit a password reset verification// (POST /v1/auth/passwordreset/verify)
	Passwordresetverify(ctx echo.Context) error
	// Create a new account// (POST /v1/auth/register)
	CreateAccount(ctx echo.Context) error
	// Verify a user's email// (POST /v1/auth/verifyemail)
	Verify(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PerformAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PerformAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PerformAuth(ctx)
	return err
}

// Check converts echo context to params.
func (w *ServerInterfaceWrapper) Check(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckParams
	// ------------- Optional query parameter "username" -------------
	if paramValue := ctx.QueryParam("username"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Check(ctx, params)
	return err
}

// Passwordresetrequest converts echo context to params.
func (w *ServerInterfaceWrapper) Passwordresetrequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Passwordresetrequest(ctx)
	return err
}

// Passwordresetverify converts echo context to params.
func (w *ServerInterfaceWrapper) Passwordresetverify(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Passwordresetverify(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// Verify converts echo context to params.
func (w *ServerInterfaceWrapper) Verify(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Verify(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v1/auth/auth", wrapper.PerformAuth)
	router.GET("/v1/auth/check", wrapper.Check)
	router.POST("/v1/auth/passwordreset/request", wrapper.Passwordresetrequest)
	router.POST("/v1/auth/passwordreset/verify", wrapper.Passwordresetverify)
	router.POST("/v1/auth/register", wrapper.CreateAccount)
	router.POST("/v1/auth/verifyemail", wrapper.Verify)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYTU8kNxP+K5bfV8phW8ywcJpTNqskyh6iFctmDwihmnb1jEO33bjsGUaI/x6V3V9D",
	"NywQQJsLtNrV9fHUU4/tuZG5rWpr0HiSixtJ+RoriI8f8twG4/mxdrZG5zXGBaxAl/zgdzXKhSTvtFnJ",
	"20zWQLS1Tk0uBkJnoMKJxdtMOrwK2qGSi7MmwOCLgefz20x+CH79sQRdjXPL29doQsW+Wh/vOg+ZrAqQ",
	"HNHgVp5n40yrAi5yq/DpNXp7ieZfVp9K4Dp/ZRz+QqcLnYPX1ozrfYmAA5iTuxjbOesm8G1gKayrwMuF",
	"1MYfvZcdiNp4XKGLKCIRrB5TMPvs7Tn6p2+n49iQ50h0cX/JeF1rh3Shh8vDjAq46AN3FktrSwTTWqS3",
	"30t6L5m90HfiDJxyZZ8b+pwgoT/Bq4D0pBF7VluTu1H4SK3dOPqrU3zEuL0BZ+vcGgoVp3Mmoa7LZgBm",
	"f5M1PLPaFDbG0b7kQPgbGA+0ExD8WmZyg47iwMjDg/nBnNOzNRqotVzIo/iKY/p1LHi2OZzxh/FPRMCm",
	"rjAqMfAfSi5kjY55/yGFcKl5v1i1S5NhPCa5HCXcCSs//d9hIRfyf7NeeWeN7M56ZYsoKKTc6TqNfpQ9",
	"NL7xLKJOkACj0qNQ4EEOgfYuYESeamso9fb9fP5i2fKUTuT56dtpbMMg19TlaFlAKP2LpZBkaiKJYPC6",
	"xtyjEtjYZJJCVYHb7WOJAgQTUjj0wRltVgIE11BYJ4rgg0PR8SDhTegFIVFXWrRdOrsldMSshlWiLlPl",
	"nEN3FMvXmF9yWSucoFhaZWo6qNCzt8XZzZ3aPrKR0IVo50hoErABXcKy5KFiAZRXAd1OZjKN5HDmeoYU",
	"UBJmA6zvzu35NH328zmJwKHilBwLi9gCCQpRIotQcuOPpz780/pB3m9Jj6936CFsngeGZJ8mHdJdPxjq",
	"DZRazYaAP9DvVtgiMDM3UPxpjRmat9avIzaTW9GU7tAlRYLHbSQOQJulsIXwa4xEfKz07Ds/XWsSaFRt",
	"tfECyi3sqJnEjkKZCKZE4vcxSZFOH9wKbWIzfkTufAnLSnsBPVhpNvqmPpo1m36j/j5pGuM34ExzfpiA",
	"6CQRgTpyRJVi5oBod/xnkOX5QoPbvg1KK2GsF2vYsPZHAjWUSg6Oxw6+8gahLFL8Eq81eWFdI/786j9H",
	"w83wXvEgFx2uNHl09/Mvdwge2wvjU5mH11DVJQ7Oven/z2tLnolzkNtqeERc8PFu98W7uVl9PibazuO1",
	"rj9/ytVxdeR+P3Tl4RH35JGHryb/KQlMS0KhB13SI9h7OOZQ66Tna7kTCbq3Zs6lsVszeTD6GPMRIAxu",
	"BXQdfYAeSW+6G8s0Q15VlMb35Imih+svpUHDGZqUouOpDQ9F7exGK1TsYD8nFpV4GGVvrCuFDUYdiNO4",
	"WFsivSx3Il031cGPKDhpV2gO1T+RaH/NuUuh24yvnSrk99zysr1XtbPLEqt36QJ4+08AAAD//0EtYpa4",
	"EgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

