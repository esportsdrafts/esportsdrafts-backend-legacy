// Package auth provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// Account defines component schema for Account.
type Account struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthClaim defines component schema for AuthClaim.
type AuthClaim struct {
	Claim    string  `json:"claim"`
	Code     *string `json:"code,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// Error defines component schema for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// JWT defines component schema for JWT.
type JWT struct {
	AccessToken string `json:"access_token"`
	ExpiresIn   int32  `json:"expires_in"`
	IdToken     string `json:"id_token"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user returning a JWT for future operations and set session token for browsers (POST /v1/auth/auth)
	PerformAuth(ctx echo.Context) error
	// Create a new account (POST /v1/auth/register)
	CreateAccount(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PerformAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PerformAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PerformAuth(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v1/auth/auth", wrapper.PerformAuth)
	router.POST("/v1/auth/register", wrapper.CreateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWTW/jRgz9KwO2tzXsZHPTLV20RffUwxZ7CIwFI1HydKWZKcmJYwT67wVHsq1sHCAF",
	"dnsxCM3HeyQf3/gJ6jikGCioQPUEUu9owBLe1nXMQS1MHBOxeioLNKDvLdBDIqhAlH3oYFxBQpF95Obi",
	"YhbigANdWBxXwPRP9kwNVHczwOLE4ubtuILbrLsPPfrhJbf6+JlCHuyu4x3vTjes4H2LYIiB9rBdvWRa",
	"x4Z+ZH4TScvkV+bIF7KYCbSRB1SowAe9eQ8nqj4odcSGOpAIdm8BtTvP+w394+dPL7Gxrknki8avFC7m",
	"SY/JM8kXv1xeMPLNq4e/ofQManHwGcZ2HEtLguTBGN4BptT7GtXHsPlbYrAe+tDGAui1N0T6DYOiHBxm",
	"3cEKHojFxwAVXK+v1lfGMyYKmDxUcFM+WXt1V2qwebje2MHyU0oUpQyCFaoA/9FABYnYOnQ7QVhmJPpL",
	"bA5TD4PSND4vCJ8GzaKfmVqo4KfNeRI38xhuzkovVWhIavZJp0xskYLON7uiKnEYmil0DSrCsuLKmUoL",
	"JMUgU7vfX119N7ampws8P37+VNqw4Dr1uexsMff63ShMA3WBRA70mKhWahzNe1YgeRiQD89rSQ6dzbJj",
	"0szBh86hsxzayK7NmpncSQdTvYXUCYmcUit77znuhVhsbrGbpGtS2Rr0SWJMnRclfl1mNRMqHe34vwqN",
	"HnFIfTGIs33ZRMbQ/Xn2xLN7QYcD8e+e++sba9EblTrTu6TTack1pOh7eYMkr3+0JI+UJBcLanPfH9xU",
	"5+Z/leVf4WuI+3BRkx8KH4cu0N7hqf3fasneJY5Nrl9xx9WzT4njfU/Du6NxCrF5I1R3T5C5hwp2qkmq",
	"zeaJwoPnGAYKOq6pnQx1jSkdtWu+iuzxvp//GJwPLJ9gM1kj4dcNPcxRH2vs51gUO3setou6l0PjOG7H",
	"fwMAAP//cFKbNKIIAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

