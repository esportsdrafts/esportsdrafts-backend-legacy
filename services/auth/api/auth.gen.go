// Package auth provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Account defines model for Account.
type Account struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthClaim defines model for AuthClaim.
type AuthClaim struct {
	Claim    string  `json:"claim"`
	Code     *string `json:"code,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// JWT defines model for JWT.
type JWT struct {
	AccessToken string `json:"access_token"`
	ExpiresIn   int    `json:"expires_in"`
	IdToken     string `json:"id_token"`
}

// VerificationCode defines model for VerificationCode.
type VerificationCode struct {
	Code string `json:"code"`
}

// PerformAuthRequestBody defines body for PerformAuth for application/json ContentType.
type PerformAuthJSONRequestBody AuthClaim

// CreateAccountRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody Account

// VerifyRequestBody defines body for Verify for application/json ContentType.
type VerifyJSONRequestBody VerificationCode

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user returning a JWT for future operations and set session token for browsers// (POST /v1/auth/auth)
	PerformAuth(ctx echo.Context) error
	// Create a new account// (POST /v1/auth/register)
	CreateAccount(ctx echo.Context) error
	// Verify a user's email// (POST /v1/auth/verify)
	Verify(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PerformAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PerformAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PerformAuth(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// Verify converts echo context to params.
func (w *ServerInterfaceWrapper) Verify(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Verify(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v1/auth/auth", wrapper.PerformAuth)
	router.POST("/v1/auth/register", wrapper.CreateAccount)
	router.POST("/v1/auth/verify", wrapper.Verify)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xW34/bNgz+VwRtwB5q5MfdPflpt8M2rE/FdlsfikOhs+hEqy1pJJWcUeR/Hyj7cnbj",
	"bCnQ9iURRIn8SH785I+6Cm0MHjyTLj9qqrbQmry8raqQPMsyYoiA7CAboDWukQV3EXSpidH5jT4UOhqi",
	"fUA7a0wE6E0LM8ZDoRH+SQ7B6vLdEGB0Y+T54VDo28Tbu8a49hRb9bwNPrXi69nHq6OHQl/VRktED3v9",
	"UJwirYKFr5lfD1Iy+Rkx4EwWA4A6YGtYl9p5vr7SR6jOM2wAJWoLRGZzSVDx+XJeor9+e38a21QVEL3n",
	"8AH8bJ7wFB0CvXdj8wiRs2cvfwJpEmp0cRJDgP4F6GpXGXbB3w21+Z+KpeSsLi6pycPhkHvuKbXi7J02",
	"MTZDtOXfFLyQxPk65IwcN+IRfjGeDXXKJN7qQu8AyQWvS71erBYrKUSI4E10utTXeUv4w9sMd7lbL+Vi",
	"/snZBMqTJjnlwL9ZXeoIKAnd9iEEORD/FGzXp+wZ+vk8AXycZFl9j1DrUn+3fBn15TDny5dRylWwQBW6",
	"yH0mYgTPg2eVaUvKeNsvlTVs9LiijAlyiSkGT31nrlarL4ZWCDuD8/Xb+9yGEdaeSPlkbVLDXwxCP7Ez",
	"IJKHpwgVg1UwnCk0pbY12E1rCcooEQuFwAm98xtllORQB1R14oSgjjzo603AioDomFo++4hhT4AkPDeb",
	"nrpClQcJfaQYwsYRA56nWYVgGJ71/nOJBk+mjQ2MXob+/8dtIBZBXFShHUt4KcPS/cG48ps3N0T7VVbl",
	"F/3Um5v2Gn9dY7O+lh5eSOUB/xyRe5OywMY1dAFn1/I374RSlq06NU2n+tLZb8q0P/0HH/Z+lmZ3GY8y",
	"ysNemWNH/4MeO9HW7jw5BvvXkZ8TYZ9Jd3xGDa/YRZIzdfN7HjawytVqN3a5NzTqqXTyZnVzev9+Cypi",
	"2DkLVhzUE6nJXnxgVYfk7UK9CUTuselU/5LZxTdmyFSLVKiqJOWakiVXthvU6AdSz99dn7JFvnww2FSd",
	"eR6LyVbE8NhA+6p/OQ//BgAA//+vBzWwYgoAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
