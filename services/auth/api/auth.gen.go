// Package auth provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// Account defines component schema for Account.
type Account struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines component schema for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// JWT defines component schema for JWT.
type JWT struct {
	Token string `json:"token"`
}

// Login defines component schema for Login.
type Login struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// UUID defines component schema for UUID.
type UUID struct {
	Id string `json:"id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user using username/email + password returning a JWT for future operations (POST /auth)
	AuthUser(ctx echo.Context) error
	// Refresh a JWT gaining additional access to the system (POST /refresh)
	RefreshToken(ctx echo.Context) error
	// Create a new account (POST /signup)
	CreateAccount(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthUser converts echo context to params.
func (w *ServerInterfaceWrapper) AuthUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthUser(ctx)
	return err
}

// RefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RefreshToken(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth", wrapper.AuthUser)
	router.POST("/refresh", wrapper.RefreshToken)
	router.POST("/signup", wrapper.CreateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW224bNxD9FYLtWwStZMVBvU9N7CZdobVhR3JcB0JBk7MrxstLeJG0NvbfC5IrW61k",
	"x0aMAgX6Ri3ncubMGWpuMVVCKwnSWZzfYkvnIEg8vqVUeenCURulwTgO8QIE4XU4uEYDzrF1hssKtz2s",
	"ibVLZdjOS2/BSCJgx2Xbwwa+em6A4fxzl2DDYyPyrO3hX4xRZhsXVSwGL5URxOEcc+lGe7i3zsalgwpM",
	"wCLAWlI9AUqMeW8fso8/TbZzO3UN8tvhklmI8puquNyO80IMPsTcdFocbSfl7NsReQgQPlIlrRfB8TMm",
	"WtecEseVzL5YJfGsh7ksVQzHXR3iwXsiHbENIt7NcQ8vwFiuJM7xsD/oD0JdSoMkmuMcj+KnANrNI7Qs",
	"egXEykYpBtwxYcFwjsPt1ILBCSxY906xJolBOkjq3UIZNLwiQtewIedQuJLVHV2bdOOKCDDMMwhw04wE",
	"1x8NlDjHP2T3Q5R1E5SlBkfKGFhquHap7HiBGDjCa4s3WXbGQ6TdaiVt6s3eYPC8cjolYmjG86sPlJ/w",
	"cTG9KYbHvLCFPNunh8Wb4lpfnB+OD/rQjId077y5Eu/d5cfiTSHPby4vilXBl/zyYr4svqjV8eR0dDKh",
	"g9+PqqY87e/9Aft/Loc3oxt99Jp9/MDO9Mge/HTJ9eHx6Vdhfz17d7Dg6mS1//rpZIWZ2kHV+NMkygak",
	"6ypGqbxoWRJfuyeQ8zQI6VHZAcJLWGmgDhiCzqaHrReCmAbn+O09PkAEBdEgb7ms0Fo/WVQYeoXW2kIG",
	"nDcy2BAUaiyVQaV33gC603eQhiNVmrMwBLOQNzNQGrCPjERnMIk8PXcsvqtbJzVDkayg5q5R/8v7EcLO",
	"UquAof+C0Du0nWQrwpOAGePBn9SIUArWIqeQmwOyjXUgdovY8kp6/bCGqQHiYL2AvMDbfvd+/xy/WDAL",
	"MH2qxHc/82uQO/jsrp7x1A9frMnxj/4RTNbHZpW+rhuU6Gb/qtim8lqqpdyptMOIBxEkYRlU1angn0IK",
	"C6dRzNMHlpHe3z5po65qEK/We0rSQPC8xd4Ekcyd0zbPsluQC26UFCBd24cy7S99onW2GIYNhhhOrupu",
	"Gb63TT+9SGB4zM/7DBbdqVaU1N3ZOlKFNWu2QXl0att21v4VAAD//59dMbSWCwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
