// Package auth provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// Account defines model for Account.
type Account struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthClaim defines model for AuthClaim.
type AuthClaim struct {
	Claim    string  `json:"claim"`
	Code     *string `json:"code,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// JWT defines model for JWT.
type JWT struct {
	AccessToken string  `json:"access_token"`
	ExpiresIn   int     `json:"expires_in"`
	IdToken     *string `json:"id_token,omitempty"`
}

// VerificationCode defines model for VerificationCode.
type VerificationCode struct {
	Code string `json:"code"`
}

// PerformAuthRequestBody defines body for PerformAuth for application/json ContentType.
type PerformAuthJSONRequestBody AuthClaim

// CreateAccountRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody Account

// VerifyRequestBody defines body for Verify for application/json ContentType.
type VerifyJSONRequestBody VerificationCode

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user returning a JWT for future operations and set session token for browsers// (POST /v1/auth/auth)
	PerformAuth(ctx echo.Context) error
	// Create a new account// (POST /v1/auth/register)
	CreateAccount(ctx echo.Context) error
	// Verify a user's email// (POST /v1/auth/verify)
	Verify(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PerformAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PerformAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PerformAuth(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// Verify converts echo context to params.
func (w *ServerInterfaceWrapper) Verify(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Verify(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/v1/auth/auth", wrapper.PerformAuth)
	router.POST("/v1/auth/register", wrapper.CreateAccount)
	router.POST("/v1/auth/verify", wrapper.Verify)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWTY/bNhD9KwRboIcI/tjdk07dLtqiOQXttjkEi4Arjmw2EsnODO0VAv/3YiitV4rl",
	"1gGSXGxCpGbem3nzqI+6Cm0MHjyTLj9qqrbQmry8raqQPMsyYoiA7CBvQGtcIwvuIuhSE6PzG30odDRE",
	"+4B2djMRoDctzGweCo3wT3IIVpfvhgSjN0aRHw6Fvk28vWuMa0+xVc+PwadWYj3HeHWMUOir2mjJ6GGv",
	"H4pTpFWw8DX59SCFyc+IAWdYDADqgK1hXWrn+fpKH6E6z7ABlKwtEJnNJUkl5st5yf767f1pblNVQPSe",
	"wwfwszzhKToEeu/G2yNEzp59+RNIk1STwILuL0BXu8qwC/5uKMj/lCklZ3VxSSEeDofcaE+plWDvtImx",
	"GbIt/6bgRRnO1yHTcNxIRPjFeDbUKZN4qwu9AyQXvC71erFarIR9iOBNdLrU1/mRiIa3Ge5yt17Ki/kn",
	"swmUx0s45cS/WV3qCCiEbvsUghyIfwq26yl7hn4oTwAfx1dW3yPUutTfLV/mezkM9/JlfnIVLFCFLnLP",
	"RDbB8xBZZa2SMt72S2UNGz2uKGOCXGKKwVPfmavV6ouhFZXO4Hz99j63YYS1F1I+WZvU8BeD0I/pDIjk",
	"4SlCxWAVDGcKTaltDXbTWoIyShxCIXBC7/xGGSUc6oCqTpwQ1FEHfb0JWBEQHanls48Y9gRIonOz6aUr",
	"UnmQ1EeJIWwcMeB5mVUIhuHZ5D9XaPBk2tjA6Dro/3/cBmJxwUUV2rFvlzIs3R+MK795c0O0X2UrfjFN",
	"vblpr/HXNTbra+nhhVIe8M8Jud9SFti4hi7Q7Fr+5oNQyl5Vp6bpVF86+02V9qf/4MPez8rsLuNRRnnY",
	"K3Ps6H/IYyfe2p0Xx7D/deznxNhn6I7PqOHqushypmF+z8MGVrla7cYh94ZGPZVO3qxuTt+/34KKGHbO",
	"gpUA9cRqchQfWNUhebtQbwKRe2w61d9kdvGNFTL1IhWqKkm5pmLJle0GN/qB1PPH1qdqkc8dDDZVZ67H",
	"YvIoYnhsoH3V35yHfwMAAP//GHzgblcKAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

