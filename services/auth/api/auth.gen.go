// Package Schema provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package Schema

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"io"
	"net/http"
	"strings"
)

// Account defines component schema for Account.
type Account struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines component schema for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Login defines component schema for Login.
type Login struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor func(req *http.Request, ctx context.Context) error
}

// AuthUser request with JSON body
func (c *Client) AuthUser(ctx context.Context, body Login) (*http.Response, error) {
	req, err := NewAuthUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// CreateAccount request with JSON body
func (c *Client) CreateAccount(ctx context.Context, body Account) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewAuthUserRequest generates requests for AuthUser with JSON body
func NewAuthUserRequest(server string, body Login) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewAuthUserRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthUserRequestWithBody generates requests for AuthUser with non-JSON body
func NewAuthUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/auth", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateAccountRequest generates requests for CreateAccount with JSON body
func NewCreateAccountRequest(server string, body Account) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with non-JSON body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/signup", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user using username/email + password (POST /auth)
	AuthUser(ctx echo.Context) error
	// Create a new account (POST /signup)
	CreateAccount(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthUser converts echo context to params.
func (w *ServerInterfaceWrapper) AuthUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthUser(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth", wrapper.AuthUser)
	router.POST("/signup", wrapper.CreateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWW3PbNhP9Kxx831tkUTc7Ep/q2E1KTWuPHct1ndF0IHBJISYXMC6SaA//ewcgdXEl",
	"p8nU0zcIi8WePXsOoWfCRCEFAhpNomei2RwK6penjAmLxi2lEhKU4eADUFCeu4UpJZCIaKM4ZqRqEUm1",
	"XgqVHAxaDQppAQeCVYsoeLRcQUKiL02BnYydm6dVi/yslFD7uJhI/OWpUAU1JCIcTb9HWutqHA1koByW",
	"ArSm2XdA8Xduz7vqv4qM4371N+r9cM/uFBOobeGKfSFUypwzarjA8KsWSKYtwjEV/n5uclcAPlI0VJfB",
	"qTVz0iILUJoLJBHptjvtjoMlJCCVnESk77dcTTP37YTUZbm+hPYacL36gnFCIuKiEw2K1OhBmw8iKesp",
	"oIFaNnsonXhWtJA57OjIMSEw23S7yxbJaAEqsQk4uLU4Xer/FaQkIv8Lt+oNG+mG9Xw8ZQloprg0dds+",
	"ECRgKM812aXdKAt+DloK1PU8e53Od7SzhfSy1jUYqxCSYPz7TWDEA6Aj94Vg6t29zN2EDVkEyvF89onx",
	"Sz6OJ09x94LHOsbrY3YWn8QP8u72bDxqQznust5tOSs+mvvP8UmMt0/3d/Eq5kt+fzdfxl/F6uLmqn95",
	"wzq/nWdletXu/QHHfy67T/0neT5IPn9KrmVfj4b3XJ5dXD0W+pfrD6MFF5er48HWSK9It0Y9PcC868kp",
	"BtA0BDYt+pMptbn5Ia6/Nf7643AAhEVYSWAGkgCaMy2ibVFQVZKInG7xQUADp8HAao5ZsJZj6AUbvAt2",
	"pGpoVhvSuWXqbgw1z9DK163DFFAD66/rG/hn45Gf/I4GtQDVZqL411ZagzzAZhP6ATt138JOfiw82TOT",
	"259M4vP91AnyRwt1Ynz+wlS943633xulR+msMzoaQPr+aDh8D0fDAZwMhr3uYNA/+UfVbypPv8GStoyB",
	"1qnN8zKoBZD8p+Kf4AOKJR5U/pnHE9AAYRnQjS7/Lu3Kc55Y9soT1HqxJZWY5VC8W79OtSpd5jOxysl2",
	"bozUURg+Ay64ElgAmqoNaf1qtamU4aLr3i2qOJ3lzX+P7dn6py1qMNzX5+0EFs0qF4zmzVobmrnhTXco",
	"90lVVU2rvwIAAP//sIFxeQUJAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

