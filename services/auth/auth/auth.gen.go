// Package Auth provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package Auth

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"io"
	"net/http"
	"strings"
)

// Account defines component schema for Account.
type Account struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines component schema for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Login defines component schema for Login.
type Login struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor func(req *http.Request, ctx context.Context) error
}

// AuthUser request with JSON body
func (c *Client) AuthUser(ctx context.Context, body Login) (*http.Response, error) {
	req, err := NewAuthUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// CreateAccount request with JSON body
func (c *Client) CreateAccount(ctx context.Context, body Account) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewAuthUserRequest generates requests for AuthUser with JSON body
func NewAuthUserRequest(server string, body Login) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewAuthUserRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthUserRequestWithBody generates requests for AuthUser with non-JSON body
func NewAuthUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/auth", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateAccountRequest generates requests for CreateAccount with JSON body
func NewCreateAccountRequest(server string, body Account) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with non-JSON body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/signup", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user using username/email + password (POST /auth)
	AuthUser(ctx echo.Context) error
	// Create a new account (POST /signup)
	CreateAccount(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthUser converts echo context to params.
func (w *ServerInterfaceWrapper) AuthUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthUser(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth", wrapper.AuthUser)
	router.POST("/signup", wrapper.CreateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xW23LbNhD9FQ7at8iibnYkPjWxm5Sa1h47lus6o+lA4JJCTC5gXCTRHv57ByB1cSWn",
	"ydSTNwiLxZ49ew6hJ8JEIQUCGk2iJ6LZHArql+8YExaNW0olJCjDwQegoDx3C1NKIBHRRnHMSNUikmq9",
	"FCo5GLQaFNICDgSrFlHwYLmChESfmwI7GTs3T6sW+VUpofZxMZH4y1OhCmpIRDiafo+01tU4GshAOSwF",
	"aE2zb4Di79yed9V/FxnH/eqv1Pvhnt0pJlDbwhX7TKiUOWfUcIHhFy2QTFuEYyr8/dzkrgB8oGioLgNq",
	"zZy0yAKU5gJJRLrtTrvjYAkJSCUnEen7LVfTzH07oc9yfQntNeB69QXjhETERScaFKnRgzbvRVLWU0AD",
	"tWz2UDrxrGghc9jRkWNCYLbpdpctktECVGITcHBrcbrUnxWkJCI/hVv1ho10w3o+nrIENFNcmrptHwgS",
	"MJTnmuzSbpQFPwctBep6nr1O5xva2UJ6XusKjFUISTD+8zow4h7QkftMMPXuXuZuwoYsAuV4PvvI+AUf",
	"x5PHuHvOYx3j1TE7jU/ie3l7czoetaEcd1nvppwVH8zdp/gkxpvHu9t4FfMlv7udL+MvYnV+fdm/uGad",
	"P86yMr1s9/6C47+X3cf+ozwbJJ8+Jleyr0fDOy5Pzy8fCv3b1fvRgouL1fFga6QXpFujnh5g3vXkFANo",
	"GgKbFv3JlNrcfBfXXxt//XE4AMIirCQwA0kAzZkW0bYoqCpJRN5t8UFAA6fBwGqOWbCWY+gFG7wJdqRq",
	"aFYb0rll6m4MNc/QypetwxRQA+uv6yv4Z+ORX/yOBrUA1Wai+N9WWoM8wGYT+g47dV/DTn4sPNkzk9uf",
	"TOKz/dQJ8gcLdWJ89sxUveN+t98bpUfprDM6GkD69mg4fAtHwwGcDIa97mDQP/lP1W8qT7/CkraMgdap",
	"zfMyqAWQ/FDxT/AexRIPKv/U4wlogLAM6EaX/5Z25TlPLHvhCWo925JKzHIo3qxfp1qVLvOJWOVkOzdG",
	"6igMnwAXXAksAE3VhrR+tdpUynDRde8WVZzO8ua/x/Zs/dMWNRju6/N2AotmlQtG82atDc3c8KY7lPuk",
	"qqqm1T8BAAD//ymUKW4FCQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
